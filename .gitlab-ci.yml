stages:
  - analyze
  - security
  - quality-check
  - docker_build
  - image_scan
  - push


sonarqube_analyze_job:
  stage: analyze
  image: gradle:jdk17
  script:
    - gradle clean build # 바이너리 및 리포트 생성
    - gradle sonar -Dsonar.login="${SONAR_TOKEN}" -Dsonar.host.url="${SONAR_HOST_URL}"
    # 프로젝트 키 설정 (build.gradle에서 확인)
    - PROJECT_KEY=$(grep "sonar.projectKey" build.gradle | cut -d'"' -f2)
    # 분석 결과 조회 및 JSON 저장
    - |
      curl -u "${SONAR_TOKEN}:" \
        "${SONAR_HOST_URL}/api/measures/component?component=${PROJECT_KEY}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating" \
        -o sonar-results.json
    # 이슈 상세 정보 조회
    - |
      curl -u "${SONAR_TOKEN}:" \
        "${SONAR_HOST_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=false" \
        -o sonar-issues.json
    # 품질 게이트 상태 조회
    - |
      curl -u "${SONAR_TOKEN}:" \
        "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" \
        -o sonar-quality-gate.json
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - sonar-results.json
      - sonar-issues.json
      - sonar-quality-gate.json
    expire_in: 1 week
  only:
    - main
    - dev

# 대안: 더 간단한 Trivy 이미지 스캔 (Docker 이미지 재빌드) 오래 걸려서 잠시 주석처리
trivy_simple_scan:
  stage: image_scan
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  variables:
    IMAGE: "${REGISTRY_URL}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}"
    DOCKER_HOST: "tcp://${DOCKER_HOST}"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker info
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - echo "Rebuilding image for Trivy scan..."
    # 이미지 재빌드 (간단한 방법)
    - docker build --network host -t ${IMAGE} .
    # Trivy 스캔
    - trivy image --format json --output trivy-simple-report.json ${IMAGE}
    - trivy image --format table ${IMAGE}
  artifacts:
    when: always
    paths:
      - trivy-simple-report.json
    expire_in: 1 week
  only:
    - main
    - dev
  allow_failure: true

# GitLeaks 보안 검사
gitleaks:
  stage: security
  image: zricethezav/gitleaks:latest
  script:
    - gitleaks detect --source . --verbose
  only:
    - main
    - dev
  allow_failure: true # 필요 시 false로 설정해도 됨

# Snyk security scanning
snyk-test:
  stage: security
  image: gradle:8.5-jdk17
  script:
    # - apt-get update && apt-get install -y npm
    # - npm install -g snyk snyk-to-html

    # - snyk auth $SNYK_TOKEN
    - chmod +x gradlew
    - ./gradlew snyk-test
    # - ./gradlew snyk-test --json-file-output=snyk-results.json || true
    # - snyk-to-html -i snyk-results.json -o snyk-report.html
  artifacts:
    reports:
      dependency_scanning: snyk-results.json
    paths:
      - snyk-results.json # GitLab 통합용 JSON 파일
      # - snyk-report.html   # 검토용 HTML 파일 (선택 사항)
    expire_in: 1 week
    when: always
  allow_failure: true
  only:
    - main
    - dev

docker_build:
  stage: docker_build
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  variables:
    IMAGE: "${REGISTRY_URL}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}"
    DOCKER_HOST: "tcp://${DOCKER_HOST}"
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker --version
    - if [ ! -f Dockerfile ]; then echo "Dockerfile not found. Build aborted."; exit 1; fi
    - docker build --network host -t ${IMAGE} .
  only:
    - main
    - dev

docker_push:
  stage: push
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  variables:
    IMAGE: "${REGISTRY_URL}/${HARBOR_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_SHA}"
    DOCKER_HOST: "tcp://${DOCKER_HOST}"
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u ${USER_NAME} -p ${USER_PASSWORD} ${REGISTRY_URL}
    - docker push ${IMAGE}
  only:
    - main
    - dev
